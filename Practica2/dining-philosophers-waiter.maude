load model-checker.maude

fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [N] = [sd(N, k)] if N >= k .
endfm

fmod QUEUE/{P :: NAT*} is
    pr NAT/{P} .
    sort Queue .
    subsort Nat/{P} < Queue .
    op nilQueue : -> Queue .
    op __ : Queue Queue -> Queue [ctor assoc id: nilQueue] .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    pr NAT/{P} .
    pr QUEUE/{P} .
    sorts Philosopher Chopstick Status Configuration Waiter .
    subsort Waiter Philosopher Chopstick < Configuration .

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none].
    op thinking : -> Status .
    op hungry : -> Status .
    op eating : -> Status .
    op waiter : Queue Bool -> Waiter [ctor] .
    op philosopher : Nat/{P} Status Nat -> Philosopher .
    op chopstick : Nat/{P} -> Chopstick .
    vars N M M1 C : Nat .
    var Q : Queue .
    var B : Bool .
    rl [get-hungry] : waiter(Q, B) philosopher([N], thinking, 0) => waiter([N] Q, B) philosopher([N], hungry, 0) .
    crl [grab-sticks] : waiter((Q [N]), false) philosopher([N], hungry, 0) chopstick([M]) chopstick([M1]) => waiter(Q, true) philosopher([N], hungry, s s 0) if (([N] == [M]) and ([M1]== [s M])) .
    rl [eat] : philosopher([N], hungry, 2) => philosopher([N], eating, 2) .
    rl [think] : waiter(Q, true) philosopher([N], eating, 2) => waiter(Q, false) philosopher([N], thinking, 0) chopstick([N]) chopstick([s N]) .
    
    var K : Nat .
    var p1 p2 : Nat/{P} .
    op initState : Nat -> Configuration .

    eq initState( 0 ) = none .
    eq initState(s K) = chopstick([K]) philosopher([K], thinking, 0) (initState(K)) .
    op init : Nat -> Configuration .
    eq init(K) = waiter(nilQueue, false) initState(K) .
endm

view 5 from NAT* to INT is
    op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    pr DINING-PHILOSOPHERS{P} .
    inc SATISFACTION .
    subsort Configuration < State .
    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks : Nat/{P} Nat -> Prop .
    var N : Nat/{P} .
    var S : Status .
    var M : Nat .
    var C : Configuration .
    eq philosopher(N, S, M) C |= phil-status(N, S) = true .
    eq philosopher(N, S, M) C |= phil-sticks(N, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
    pr DINING-PHILOSOPHERS-PREDS{5} .
    inc MODEL-CHECKER .
    inc LTL-SIMPLIFIER .
endm