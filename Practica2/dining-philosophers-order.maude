load model-checker.maude
load prelude.maude

fth NAT* is
protecting NAT .
op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
sort Nat/{k} .
op [_] : Nat -> Nat/{k} .
var N : Nat .
ceq [N] = [sd(N, k)] if N >= k .

var M : Nat .
op _<_ : Nat/{k} Nat/{k} -> Bool .
ceq [N] < [M] = true if sd(N, k) < sd(M, k) .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
protecting NAT/{P} .

sorts Status Philosopher Chopstick Configuration .
subsort Philosopher Chopstick < Configuration .

op none : -> Configuration [ctor] .
op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .
op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
op chopstick : Nat/{P} -> Chopstick [ctor] .
op thinking : -> Status .
op eating : -> Status .
op hungry : -> Status .

var P1 : Nat .
var N : Nat .
var C : Nat .
var phil : Philosopher .
var chop : Chopstick .

var K : Nat .
op initState : Nat -> Configuration .
eq initState(0) = none .
eq initState (s K) = chopstick([K]) philosopher([K], thinking, 0)  (initState(K)) .


rl [get-hungry] : philosopher([P1], thinking, N) => philosopher([P1], hungry, N) .
crl [grab-stick] : chopstick([C]) philosopher([P1], hungry, 0) => philosopher([P1], hungry, 1) 
if ([C] == [P1] and [P1] < [s P1]) or ([C] == [s P1] and [s P1] < [P1]) .
crl [grab-stick] : chopstick([C]) philosopher([P1], hungry, 1) => philosopher([P1], hungry, 2) 
if ([C] == [s P1] and [P1] < [s P1]) or ([C] == [s P1] and [s P1] < [P1]) .
rl [eat] : philosopher([P1], hungry, 2) => philosopher([P1], eating, 2) .
rl [think] : philosopher([P1], eating, 2) => philosopher([P1], thinking, 0) .

endm

view 5 from NAT* to INT is
op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
pr DINING-PHILOSOPHERS{5} .
endm

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
pr DINING-PHILOSOPHERS{P} .
inc SATISFACTION .
subsort Configuration < State .
op phil-status : Nat/{P} Status -> Prop .
op phil-sticks : Nat/{P} Nat -> Prop .
var N : Nat/{P} .
var S : Status .
var M : Nat .
var C : Configuration .
eq philosopher(N, S, M) C |= phil-status(N, S) = true .
eq philosopher(N, S, M) C |= phil-sticks(N, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
pr DINING-PHILOSOPHERS-PREDS{5} .
inc MODEL-CHECKER .
inc LTL-SIMPLIFIER .
endmload model-checker.maude

fth NAT* is
    protecting NAT .
    op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [N] = [sd(N, k)] if N >= k .

    var M : Nat .
    op _<_ : Nat/{k} Nat/{k} -> Bool .
    ceq [N] < [M] = true if sd(N, k) < sd(M, k) .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
    protecting NAT/{P} .

    sorts Status Philosopher Chopstick Configuration .
    subsort Philosopher Chopstick < Configuration .

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .

    op thinking : -> Status .
    op eating : -> Status .
    op hungry : -> Status .

    op philosopher : Nat/{P} Status Nat -> Philosopher .
    op chopstick : Nat/{P} -> Chopstick .
    vars N M C : Nat .
    rl [get-hungry] : philosopher([N], thinking, C) => philosopher([N], hungry, C) .
    crl [grab-stick] : philosopher([N], hungry, 0) chopstick([M]) => philosopher([N], hungry, 1) 
    if ([M] == [N] and [N] < [s N]) or ([M] == [s N] and [s N] < [N]) .
    crl [grab-stick] : philosopher([N], hungry, 1) chopstick([M])  => philosopher([N], hungry, 2) 
    if ([M] == [s N] and [N] < [s N]) or ([M] == [N] and [s N] < [N]) .
    rl [eat] : philosopher([N], hungry, 2) => philosopher([N], eating, 2) .
    rl [think] : philosopher([N], eating, 2) => philosopher([N], thinking, 0) chopstick([N]) chopstick([s N]) .

    var K : Nat .
    op initState : Nat -> Configuration .
    eq initState(0) = none .
    eq initState (s K) = chopstick([K]) philosopher([K], thinking, 0)  (initState(K)) .

endm

view 5 from NAT* to INT is
op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
pr DINING-PHILOSOPHERS{5} .
endm

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    protecting DINING-PHILOSOPHERS{P} .
    including SATISFACTION .

    subsort Configuration < State .
    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks  : Nat/{P} Nat -> Prop .

    var N : Nat/{P} .
    var S : Status .
    var M : Nat .
    var C : Configuration .

    eq philosopher (N, S, M) C |= phil-status(N, S) = true .
    eq philosopher (N, S, M) C |= phil-sticks(N, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
    pr DINING-PHILOSOPHERS-PREDS{5} .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm