load model-checker.maude

fth NAT* is
protecting NAT .
op k : -> NzNat .
endfth

fmod NAT/{k :: NAT*} is
sort Nat/{k} .
op [_] : Nat -> Nat/{k} .
var N : Nat .
ceq [N] = [sd(N, k)] if N >= k .
endfm

mod DINING-PHILOSOPHERS{P :: NAT*} is
protecting NAT/{P} .

sorts Status Philosopher Chopstick Configuration .
subsort Philosopher Chopstick < Configuration .

op none : -> Configuration [ctor] .
op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .
op philosopher : Nat/{P} Status Nat -> Philosopher [ctor] .
op chopstick : Nat/{P} -> Chopstick [ctor] .
op thinking : -> Status .
op eating : -> Status .
op hungry : -> Status .

var P1 : Nat .
var N : Nat .
var C : Nat .
var phil : Philosopher .
var chop : Chopstick .

var K : Nat .
op initState : Nat -> Configuration .
eq initState(0) = none .
eq initState (s K) = chopstick([K]) philosopher([K], thinking, 0)  (initState(K)) .


rl [get-hungry] : philosopher([P1], thinking, N) => philosopher([P1], hungry, N) .
crl [grab-stick] : chopstick([C]) philosopher([P1], hungry, N) => philosopher([P1], hungry, s N) if ([C] == [P1]) or ([C] == [s P1]) .
crl [eat] : philosopher([P1], hungry, N) => philosopher([P1], eating, N) if N == 2 .
rl [think] : philosopher([P1], eating, N) => philosopher([P1], thinking, 0) .

endm

view 5 from NAT* to INT is
op k to term 5 .
endv

mod DINING-PHILOSOPHERS-5 is
pr DINING-PHILOSOPHERS{5} .
endm