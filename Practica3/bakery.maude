load model-checker.maude .

omod BPROCESS is
    pr NAT .
    including CONFIGURATION .

    sort Mode .
    
    class BProcess | mode : Mode, number : Nat .
    
    op mode: _ : Mode -> Attribute [gather (&)] .
    op number: _ : Nat -> Attribute [gather (&)] .
endom


omod DISPENSER is
    pr NAT .
    including CONFIGURATION .

    class Dispenser | next : Nat, last : Nat .

    ops next:_ last:_ : Nat -> Attribute [gather (&)] .
endom

mod BAKERY is
    pr BPROCESS .
    pr DISPENSER .
    sort GBState .
    subsort Configuration < GBState . 
    subsort Nat < Oid .

    op [[_]] : Configuration -> GBState .
    ops sleep wait crit : -> Mode .

    vars a b : Oid .
    vars N L T : Nat .
    var ATS : AttributeSet .

    rl [sleep-wait] : < a : BProcess | mode: sleep, number: N > < b : Dispenser | next: T, last: L > =>
                        < a : BProcess | mode: wait, number: L > < b : Dispenser | next: T, last: s L > .

    rl [wait-crit] : < a : BProcess | mode: wait, number: N > < b : Dispenser | next: N, ATS > =>
                        < a : BProcess | mode: crit, number: N > < b : Dispenser | next: N, ATS > .
                        
    rl [crit-sleep] : < a : BProcess | mode: crit, number: N > < b : Dispenser | next: N, ATS > =>
                        < a : BProcess | mode: sleep, number: 0 > < b : Dispenser | next: s N, ATS > .

    op initial : Nat -> GBState .
    eq initial(N) = [[init(N)]] .

    op init : Nat -> Configuration .
    eq init(0) = < 0 : Dispenser | next: 1, last: 1 > .
    eq init(s N) = < s N : BProcess | mode: sleep, number: 0 > init(N) .
endm

mod ABSTRACT-BAKERY is
    including BAKERY .
    vars O O' : Oid .
    vars N M T : Nat .
    var ATTS : AttributeSet .
    var C : Configuration .
    var MODE : Mode .
    var STATE : GBState .

    op decOne : Configuration -> Configuration .
    eq decOne( none ) = none .
    eq decOne( < O : BProcess |  mode: sleep, number: N > C ) = < O : BProcess |  mode: sleep, number: N > decOne(C) .
    eq decOne( < O : Dispenser | ATTS > C ) = < O : Dispenser | ATTS > decOne(C) .
    ceq decOne( < O : BProcess |  mode: MODE,  number: 0 > C ) = < O : BProcess | mode: MODE, number: 0 > decOne(C) if MODE =/= sleep .
    ceq decOne( < O : BProcess |  mode: MODE,  number: s N > C ) = < O : BProcess | mode: MODE, number: N > decOne(C) if MODE =/= sleep .

    eq [[  C < O' : Dispenser | next: s s M, last: s T > ]]
        = [[ decOne(C) < O' : Dispenser | next: s M, last: T > ]] .
endm

mod ABSTRACT-BAKERY-PREDS is
    protecting ABSTRACT-BAKERY .
    including SATISFACTION .
    subsort GBState < State .

    var MODE : Mode .
    var G : GBState .
    vars N M : Nat .
    vars O O' : Oid .
    var C : Configuration .

    op mode : Nat Mode -> Prop .
    eq [[ < O : BProcess | mode: MODE, number: N > C ]] |= mode(N, MODE) = true .
    
    op 2-crit : -> Prop .
    eq [[ < O : BProcess |  mode: crit,  number: N > < O' : BProcess |  mode: crit,  number: M > C ]] 
    |= 2-crit = true .
endm

mod ABSTRACT-BAKERY-CHECK is
    protecting ABSTRACT-BAKERY-PREDS . 
    including MODEL-CHECKER . 
    including LTL-SIMPLIFIER .
endm