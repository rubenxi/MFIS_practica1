fmod INTVAR is
    sort IntVar .
    op turn : -> IntVar . 
    op 'c1 : -> IntVar .
    op 'c2 : -> IntVar .
    op 'turn : -> IntVar . 
endfm

fmod BOOLVAR is
    sort BoolVar .
    op wte0 : -> BoolVar .
    op wants-to-enter : -> BoolVar . 
endfm

fmod MEMORY++ is
    protecting INT .
    pr BOOLVAR .
    pr INTVAR .
    sorts Memory Bool? .
    subsorts Bool < Bool? .
    sorts IntExpression BoolExpression .
    subsorts Int IntVar < IntExpression  .
    subsorts Bool BoolVar < BoolExpression .

    protecting LIST{Int} .
    protecting LIST{Bool} .

    op none : -> Memory [ctor] .
    op __ : Memory Memory -> Memory [ctor assoc comm id: none] .

    op [_,_] : IntVar Int -> Memory .
    op [_,_] : IntVar List{Int} -> Memory .
    op [_,_] : BoolVar Bool -> Memory .
    op [_,_] : BoolVar List{Bool} -> Memory .

    op _in_ : IntVar Memory -> Bool? . ---- está X en memoria?
    op _in_ : BoolVar Memory -> Bool? . ---- está X en memoria?

    var IntVar : IntVar .
    var BoolVar : BoolVar .
    var M : Memory .
    var LB : List{Bool} .
    var LI : List{Int} .

    eq IntVar in [ IntVar, LI ] M = true .
    eq IntVar in M = false [owise] .

    eq BoolVar in [ BoolVar, LB ] M = true .
    eq BoolVar in M = false [owise] .
endfm


fmod EXPRESSION++ is
    inc MEMORY++ .    

    var IVar : IntVar .
    var M : Memory .
    vars N N' : Int .
    vars E E' : IntExpression .
    var LI : List{Int} .
    
    op eval : IntExpression Memory -> Int .
    eq eval(N, M) = N .
    eq eval(LI, M) = LI .
    eq eval(IVar, [IVar, N] M) = N .
    eq eval(IVar, [IVar, LI] M) = LI .
    eq eval(IVar, M) = 0 [owise] .

    op _+'_ : IntExpression IntExpression -> IntExpression [ctor] .
    eq eval(E +' E', M) = eval(E, M) + eval(E', M) .

    op _*'_ : IntExpression IntExpression -> IntExpression [ctor] .
    eq eval(E *' E', M) = eval(E, M) * eval(E', M) .
    
    op _-'_ : IntExpression IntExpression -> IntExpression [ctor] .
    eq eval(E -' E', M) = eval(E, M) + (- eval(E', M)) .

    op _[_] : IntExpression IntExpression -> IntExpression [ctor] .
    eq eval(IVar[E], [IVar, LI] M) = eval($getInt(eval(E, [IVar, LI] M), LI) , [IVar, LI] M) .

    op _%_ : IntExpression IntExpression -> IntExpression [ctor] .
    eq eval(E % E', M) = eval(E, M) rem eval(E', M) .

    op $getInt : Int List{Int} -> IntExpression .
    eq $getInt(0, N LI) = N .
    eq $getInt(N, nil) = 0 .
    eq $getInt(s N, N' LI) = $getInt(N, LI) .

    op eval : BoolExpression Memory -> Bool .
    var B : Bool .
    var BVar : BoolVar .
    var LB : List{Bool} .
    eq eval(B, M) = B .
    eq eval(LB, M) = LB .
    eq eval(BVar, [BVar, B] M) = B .
    eq eval(BVar, [BVar, LB] M) = LB .
    eq eval(BVar, M) = false [owise] .

    op _[_] : BoolExpression IntExpression -> BoolExpression [ctor] .
    eq eval(BVar[E], [BVar, LB] M) = eval($getBool(eval(E, [BVar, LB] M), LB), [BVar, LB] M) .
    
    op $getBool : Int List{Bool} -> Bool .
    eq $getBool(0, B LB) = B .
    eq $getBool(N , nil) = false .
    eq $getBool(s N, B LB) = $getBool(N, LB) .

endfm

fmod TESTS++ is
    including MEMORY++ .
    including EXPRESSION++ .
    sort Test .

    op eval : Test Memory ~> Bool .
    var IVar IVar' : IntVar .
    var BVar BVar' : BoolVar .
    vars I I' K : Int .
    vars B B' : Bool .
    
    op _=_ : IntExpression IntExpression -> Test .
    op _=_ : BoolExpression BoolExpression -> Test .

    op _>'_ : IntExpression IntExpression -> Test .

    op _!=_ : IntExpression IntExpression -> Test .
    op _!=_ : BoolExpression BoolExpression -> Test .

    op _&_ : Test Test -> Test [assoc] .
    op _||_ : Test Test -> Test [assoc] .
    
    var M : Memory .
    vars T T' : Test .

    eq eval(IVar >' I, [IVar, K] M) = K > I .
    eq eval(IVar >' I, M) = 0 > I [owise] .
    eq eval(T & T', M) = eval(T, M) and eval(T', M) .
    eq eval(T || T', M) = eval(T, M) or eval(T', M) .

    vars BoolE BoolE' : BoolExpression .
    vars IntE IntE' : IntExpression .
    
    eq eval(IntE = IntE', M) = eval(IntE, M) == eval(IntE', M) .
    eq eval(BoolE = BoolE', M) = eval(BoolE, M) == eval(BoolE', M) .

    eq eval( IntE >' IntE' , M) = eval(IntE, M) > eval(IntE', M) .
    
    eq eval(IntE != IntE', M) = eval(IntE, M) =/= eval(IntE', M) .
    eq eval(BoolE != BoolE', M) = eval(BoolE, M) =/= eval(BoolE', M) .

endfm

fmod SEQUENTIAL++ is
    protecting TESTS++ .
    sorts UserStatement LoopingUserStatement Program .
    subsort LoopingUserStatement < UserStatement < Program .
    op skip : -> Program [ctor] .
    op _;_ : Program Program -> Program [ctor prec 61 assoc id: skip] .
    op _:=_ : IntExpression IntExpression -> Program [ctor] .
    op _:=_ : BoolExpression BoolExpression -> Program [ctor] .
    op if_then_fi : Test Program -> Program [ctor] .

    op if_then_else_fi : Test Program Program -> Program [ctor] .
    op while_do_od : Test Program -> Program [ctor] .
    op repeat_until_li : Program Test -> Program [ctor] .
    op repeat_forever : Program -> Program [ctor] .
endfm

mod PARALLEL++ is
    protecting SEQUENTIAL++ .
    sorts Pid Process Soup MachineState .
    subsort Process < Soup .
    subsort Int < Pid .

    op [_,_] : Pid Program -> Process .
    op empty : -> Soup .
    op _|_ : Soup Soup -> Soup [prec 61 assoc comm id: empty] .
    op {_,_} : Soup Memory -> MachineState .

    vars Program1 Program2 Program3 : Program .
    var Soup : Soup .
    var Statement : UserStatement .
    var LoopStatement : LoopingUserStatement .
    vars Pid1 Pid2 : Pid .
    var Mem : Memory .
    var BoolVar BoolVar'  : BoolVar .
    var IntVar IntVar'  : IntVar .
    vars IntExpress IntExpress' : IntExpression .
    vars BoolExpress BoolExpress' : BoolExpression .
    vars B1 B2 : Bool .
    vars I1 I2 I3 : Int .
    var Test : Test .
    var LB LB' : List{Bool} .
    var LI LI' : List{Int} .

    rl [loop-statement] : {[Pid1, LoopStatement ; Program1] | Soup, Mem} => {[Pid1, LoopStatement ; Program1] | Soup, Mem} .

    rl [user-statement] :{[Pid1, Statement ; Program1] | Soup, Mem} => {[Pid1, Program1] | Soup, Mem} .

    rl [insert-int-array] : {[Pid1, (IntVar[IntExpress] := IntExpress') ; Program1] | Soup, [IntVar, LI] Mem}
        => {[Pid1, Program1] | Soup, [IntVar,eval($insert(eval(IntExpress,[IntVar, LI] Mem),eval(IntExpress', [IntVar, LI] Mem),LI),[IntVar,LI] Mem)] Mem} .

    rl [replace-int] : {[Pid1, (IntVar := IntExpress) ; Program1] | Soup, [IntVar, IntExpress'] Mem}
        => {[Pid1, Program1] | Soup, [IntVar,eval(IntExpress,[IntVar, IntExpress'] Mem)] Mem} .

    crl [create-int] : {[Pid1, (IntVar := IntExpress) ; Program1] | Soup, Mem}
        => {[Pid1, Program1] | Soup, [IntVar, eval(IntExpress,Mem)] Mem} 
        if IntVar in Mem =/= true .

    crl [create-intvar] : {[Pid1, (IntVar[IntExpress] := IntExpress') ; Program1] | Soup, Mem}
        => {[Pid1, Program1] | Soup, [IntVar,eval($insert(eval(IntExpress,Mem),eval(IntExpress',Mem),nil),Mem)] Mem}
        if IntVar in Mem =/= true .

    rl [insert-bool-array] : {[Pid1, (BoolVar[IntExpress] := BoolExpress) ; Program1] | Soup, [BoolVar, LB] Mem}
        => {[Pid1, Program1] | Soup, [BoolVar,eval($insertBool(eval(IntExpress,Mem),eval(BoolExpress, [BoolVar, LB] Mem ),LB),[BoolVar,LB] Mem)] Mem} .

    rl [replace-bool] : {[Pid1, (BoolVar := BoolExpress) ; Program1] | Soup, [BoolVar, B2] Mem}
        => {[Pid1, Program1] | Soup, [BoolVar,eval(BoolExpress,[BoolVar, B2] Mem)] Mem} .

    crl [create-boolvar] : {[Pid1, (BoolVar[IntExpress] := BoolExpress) ; Program1] | Soup, Mem}
        => {[Pid1, Program1] | Soup, [BoolVar,eval($insertBool(eval(IntExpress,Mem),eval(BoolExpress,Mem),nil),Mem)] Mem}
        if BoolVar in Mem =/= true .

    crl [create-bool] : {[Pid1, (BoolVar := BoolExpress) ; Program1] | Soup, Mem}
        => {[Pid1, Program1] | Soup, [BoolVar, eval(BoolExpress,Mem)] Mem} 
        if BoolVar in Mem =/= true .

    rl [if-then-fi] :{[Pid1, if Test then Program1 fi ; Program2] | Soup, Mem}
        => {[Pid1, if eval(Test, Mem) then Program1 else skip fi ; Program2] | Soup, Mem} .

    rl [if-then-else-fi] :{[Pid1, if Test then Program1 else Program2 fi ; Program3] | Soup, Mem}
        => {[Pid1, if eval(Test, Mem) then Program1 else Program2 fi ; Program3] | Soup, Mem} .

    rl [while-do-od] :{[Pid1, while Test do Program1 od ; Program2] | Soup, Mem}
        => {[Pid1, if eval(Test, Mem) then (Program1 ; while Test do Program1 od) else skip fi ; Program2] | Soup, Mem} .

    rl [repeat-forever] :{[Pid1, repeat Program1 forever ; Program2] | Soup, Mem}
        => {[Pid1, Program1 ; repeat Program1 forever ; Program2] | Soup, Mem} .

    rl [repeat_until_li] :{[Pid1, repeat Program1 until Test li ; Program2] | Soup, Mem}
        => {[Pid1, Program1 ; if not eval(Test,Mem) then repeat Program1 until Test li else skip fi ; Program2] | Soup, Mem} .
    
    op $insert : Int Int List{Int} ->  List{Int} .
    eq $insert(0, I1, nil) = I1 .
    eq $insert(s I1,I2,nil) = 0 $insert(I1,I2, nil) .
    eq $insert(0,I1, I2 LI) = I1 LI .
    eq $insert(s I1,I2,I3 LI) = I3 $insert(I1,I2,LI) .

    op $insertBool : Int Bool List{Bool} ->  List{Bool} .
    eq $insertBool(0, B1,nil) = B1 .
    eq $insertBool(s I1,B1,nil) = false $insertBool(I1,B1,nil) .
    eq $insertBool(0,B1,B2 LB) = B1 LB .
    eq $insertBool(s I1,B1,B2 LB) = B2 $insertBool(I1,B1,LB) .


endm