load model-checker.maude

*** Teoría que se utiliza para definir el problema de los filósofos para
*** Cualquier número k de filósofos.
fth NAT* is
protecting NAT .
op k : -> NzNat .
endfth

*** Módulo funcional que utiliza un tipo Nat/{k} de naturales mod. k
*** Define la operación [_] que transforma cualquier número natural a su correspondiente
*** número natural módulo k.
fmod NAT/{k :: NAT*} is
    sort Nat/{k} .
    op [_] : Nat -> Nat/{k} .
    var N : Nat .
    ceq [N] = [sd(N, k)] if N >= k .
endfm

*** Módulo de sistema que define las reglas y operaciones del problema de los filósofos
*** para cualquier número k de filósofos.
mod DINING-PHILOSOPHERS{P :: NAT*} is
    protecting NAT/{P} .

    *** Los tipos de datos que se utilizan en el problema son:
    sorts Status Philosopher Chopstick Configuration .
    subsort Philosopher Chopstick < Configuration .

    op none : -> Configuration [ctor] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .
   
   *** Las operaciones que se pueden realizar son:
    op philosopher : Nat/{P} Status Nat -> Philosopher .
    op chopstick : Nat/{P} -> Chopstick .
    
    *** Los estados que puede tener un filósofo son:
    op thinking : -> Status .
    op eating : -> Status .
    op hungry : -> Status .

    var N : Nat .
    var M : Nat .
    var C : Nat .
   
   *** La configuración inicial del problema es:
    var K : Nat .
    op initState : Nat -> Configuration .
    eq initState(0) = none .
    eq initState (s K) = chopstick([K]) philosopher([K], thinking, 0)  (initState(K)) .

    *** Las reglas que se utilizan para resolver el problema son:
    rl [get-hungry] : philosopher([N], thinking, C) => philosopher([N], hungry, C) .
    crl [grab-stick] : philosopher([N], hungry, C) chopstick([M]) => philosopher([N], hungry, s C) 
    if (([N] == [M]) or ([M] == [s N])) and (C < 2) .
    rl [eat] : philosopher([N], hungry, 2) => philosopher([N], eating, 2) .
    rl [think] : philosopher([N], eating, 2) => philosopher([N], thinking, 0) chopstick([N]) chopstick([s N]).

endm

*** Definimos la vista para indicar como instanciamos la constante k
*** De forma predefinida se instancia a 5, el número base de los filósofos
view 5 from NAT* to INT is
    op k to term 5 .
endv

*** Este módulo define el problema de los filósofos para 5 filósofos
mod DINING-PHILOSOPHERS-5 is
    pr DINING-PHILOSOPHERS{5} .
endm

mod DINING-PHILOSOPHERS-PREDS{P :: NAT*} is
    pr DINING-PHILOSOPHERS{P} .
    inc SATISFACTION .

    subsort Configuration < State .

    op phil-status : Nat/{P} Status -> Prop .
    op phil-sticks : Nat/{P} Nat -> Prop .
    
    var N : Nat/{P} .
    var S : Status .
    var M : Nat .
    var C : Configuration .
    eq philosopher(N, S, M) C |= phil-status(N, S) = true .
    eq philosopher(N, S, M) C |= phil-sticks(N, M) = true .
endm

mod DINING-PHILOSOPHERS-5-CHECK is
pr DINING-PHILOSOPHERS-PREDS{5} .
inc MODEL-CHECKER .
inc LTL-SIMPLIFIER .
endm