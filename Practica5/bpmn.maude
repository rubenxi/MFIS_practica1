load time.maude .
load model-checker.maude .

mod ID is
    inc STRING .
    sort Id .
    op id :  String -> Id [ctor] .
endm

mod GATEWAY is
    sort Gateway .
    op exclusive : -> Gateway [ctor] .
    op parallel : -> Gateway [ctor] .
endm

mod NODE is
    inc ID .
    inc GATEWAY .
    inc STRING .
    inc SET{Id} .
    inc BAG{Id} .
    inc POSRAT-TIME-DOMAIN-WITH-INF  .
    sort Node .

    op node : Id -> Node [ctor] .
    op start : Id Id -> Node [ctor] .
    op end : Id Id -> Node [ctor] .

    --- Id de la tarea
    --- Descripcion tarea
    --- Id flujo de entrada
    --- Id flujo de salida
    --- Duracion de la tarea
    --- Conjunto de Ids que necesita la tarea
    op task : Id String Id Id Time Bag{Id} -> Node [ctor] .
    op split : Id Gateway Id Set{Id} -> Node [ctor] .
    op merge : Id Gateway Set{Id} Id -> Node [ctor] .
    
endm

mod RESOURCE is
    inc ID .
    inc NAT .
    sort Resource .
    op resource : Id Nat Nat -> Resource [ctor] .
endm

mod FLOW is
    inc ID .
    inc POSRAT-TIME-DOMAIN-WITH-INF  .
    sort Flow .
    op flow : Id Time -> Flow [ctor] .
endm

mod TOKEN is
    inc ID .
    inc POSRAT-TIME-DOMAIN-WITH-INF  .
    sort Token .
    
    op token : Id Time -> Token [ctor] .
endm

omod BPMN is
    
    inc ID .
    inc GATEWAY .
    inc NODE .
    inc RESOURCE .
    inc FLOW .
    inc TOKEN .
    inc BAG{Id} .
    inc POSRAT-TIME-DOMAIN-WITH-INF .
    pr NAT .
    pr SET{Id} .
    pr SET{Node} .
    pr SET{Resource} .
    pr SET{Flow} .
    pr SET{Token} .

    var SN : Set{Node} .
    var SF : Set{Flow} .
    var ST : Set{Token} .
    var SR : Set{Resource} .
    vars Ti Ti' : TimeInf .
    vars T T' : Time .
    var id : Id .

    class Process | nodes : Set{Node}, flows : Set{Flow}, tokens : Set{Token}, resources : Set{Resource} .
 
    sorts System .
    op {_,_} : Configuration Time -> System . 

    op tokenTimeSub : Set{Token} Time -> Set{Token} .
    eq tokenTimeSub(empty, T) = empty .
    eq tokenTimeSub(token(id, Ti), T) = token(id, Ti monus T) .
    eq tokenTimeSub((token(id,Ti), ST), T) = (token(id,(Ti monus T)), tokenTimeSub(ST , T)) .

    ---rl[tick] : 
    ---rl[start] :
    
endom

mod BAG{X :: TRIV} is

    sorts Bag{X} NeBag{X} Fid Fids .
    subsort NeBag{X} < Bag{X} .
    var bag bag' : Bag{X} .
    vars x : X$Elt .
    op empty-bag : -> Bag{X} [ctor] .
    op {_} : X$Elt -> Bag{X} .
    op _;_ : Bag{X} Bag{X} -> Bag{X} [ctor assoc comm id: empty-bag] .

    eq empty-bag ; bag = bag .
    
        
endm

view Id from TRIV to ID is  
    sort Elt to Id .
endv
view Token from TRIV to TOKEN is  
    sort Elt to Token .
endv
view Node from TRIV to NODE is  
    sort Elt to Node .
endv
view Resource from TRIV to RESOURCE is  
    sort Elt to Resource .
endv
view Flow from TRIV to FLOW is  
    sort Elt to Flow .
endv
view Gateway from TRIV to GATEWAY is
    sort Elt to Gateway .
endv
