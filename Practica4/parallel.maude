---- PARALLEL: A simple parallel language and its rewriting logic semantics.

---- Only variables of type Int.
---- Memory model with locations named values of some sort IntVar.

fmod MEMORY is
  protecting INT * (op _>_ to _>'_, op _+_ to _+'_, 
                    op _*_ to _*'_, op _-_ to _-'_) .
  sorts Memory IntVar .
  op none : -> Memory .
  op __ : Memory Memory -> Memory [assoc comm id: none] .
  op [_,_] : IntVar Int -> Memory .
  op _in_ : IntVar Memory -> Bool . ---- cell allocated for Q?
  var Q : IntVar . 
  var M : Memory . 
  var N : Int .
  eq Q in [Q, N] M = true . 
  eq Q in M = false [owise] .
endfm

---- BoolExprs comparing the contents of a named memory location to an integer. 
---- By default, value of non-allocated IntVar is 0.

fmod BOOL-EXPR is
  inc MEMORY .
  sort BoolExpr .
  op _=_ : IntVar Int -> BoolExpr [prec 41] .
  op _>_ : IntVar Int -> BoolExpr [prec 37] .
  op _&_ : BoolExpr BoolExpr -> BoolExpr [assoc prec 55] .
  op eval : BoolExpr Memory -> Bool .
  var  Q : IntVar . 
  var  M : Memory .
  vars N N' K : Int . 
  vars B B' : BoolExpr .
  eq eval(Q = N, [Q, N'] M) = N == N' .
  eq eval(Q = N, M) = N == 0 [owise] .
  eq eval(Q > N, [Q, K] M) = K >' N .
  eq eval(Q > N, M) = 0 >' N [owise] .
  eq eval(B & B', M) = eval(B, M) and eval(B', M) .
  
endfm

---- Syntax for arithmetic expressions, and their evaluation semantics.
---- To avoid evaluation of expressions by themselves, the operators in 
---- the INT predefined module +, - and * are renamed as +', -' and *' 
fmod INT-EXPR is
  inc MEMORY . 
  sort IntExpr .
  subsorts IntVar Int < IntExpr .
  op _+_ : IntExpr IntExpr -> IntExpr [ctor prec 33] .
  op _-_ : IntExpr IntExpr -> IntExpr [ctor prec 33] .
  op _*_ : IntExpr IntExpr -> IntExpr [ctor prec 31] .
  op eval : IntExpr Memory -> Int .
  var  Q : IntVar . 
  var  M : Memory . 
  vars N N' : Int . 
  vars E E' : IntExpr .
  eq eval(N, M) = N .
  eq eval(Q, [Q, N] M) = N . 
  eq eval(Q, M) = 0 [owise] .
  eq eval(E + E', M) = eval(E, M) +' eval(E', M) .
  eq eval(E * E', M) = eval(E, M) *' eval(E', M) .
  eq eval(E - E', M) = eval(E, M) -' eval(E', M) .

endfm

---- Syntax for a trivial sequential programming language. 
---- We allow abstracting out program fragments as elements of sorts LoopingUserStatement and UserStatement. 
---- LoopingUserStatements abstract out potentially nonterminating program fragments. 
---- UserStatements which are not LoopingUserStatements abstract out terminating program fragments.

fmod SEQUENTIAL is
  inc BOOL-EXPR .
  inc INT-EXPR .
  sorts UserStatement LoopingUserStatement Program .
  subsort LoopingUserStatement < UserStatement < Program .
  op skip : -> Program .
  op _;_ : Program Program -> Program [prec 61 assoc id: skip] .
  op _:=_ : IntVar IntExpr -> Program [prec 51] .
  op if_{_} : BoolExpr Program -> Program .
  op while_{_} : BoolExpr Program -> Program .
  op repeat{_} : Program -> Program .
endfm

mod PARALLEL is
    inc SEQUENTIAL .
    sorts Pid Process Soup MachineState .
    subsort Process < Soup .
    subsort Int < Pid .
    op [_,_] : Pid Program -> Process .
    op empty : -> Soup .
    op _|_ : Soup Soup -> Soup [prec 61 assoc comm id: empty] .
    op {_,_} : Soup Memory -> MachineState .
    vars P R : Program . 
    var  S : Soup .
    var  U : UserStatement . 
    var  L : LoopingUserStatement .
    vars I J : Pid . 
    var  M : Memory .
    var  Q : IntVar . 
    vars N X : Int .
    var  T : BoolExpr . 
    var  E : IntExpr .
    rl {[I, L ; R] | S, M} => {[I, L ; R] | S, M}  .
    rl {[I, U ; R] | S, M} => {[I, R] | S, M}  .
    rl {[I, (Q := E) ; R] | S, [Q, X] M} 
      => {[I, R] | S, [Q, eval(E, [Q, X] M)] M}  .
   crl {[I, (Q := E) ; R] | S, M} 
      => {[I, R] | S, [Q, eval(E, M)] M} 
      if not Q in M .
    rl {[I, if T { P } ; R] | S, M} 
      => {[I, if eval(T, M) then P else skip fi ; R] | S, M} .
    rl {[I, while T { P } ; R] | S, M} 
      => {[I, if eval(T, M) 
              then (P ; while T { P }) 
              else skip 
              fi ; 
              R] | S, M} .
    rl {[I, repeat { P } ; R] | S, M} 
      => {[I, P ; repeat { P } ; R] | S, M} .
endm